import { Module } from '@nestjs/common';
import { TypeOrmModule } from '@nestjs/typeorm';
import { PasswordEncryption } from './password-encryption.provider';
import { PasswordMigrationService } from './password-migration.service';
import { AppConfigModule } from 'src/app-config/app-config.module';
import { AppConfigService } from 'src/app-config/app-config.service';
import { ScryptStrategy, BcryptStrategy, Argon2Strategy, HybridStrategy } from './strategies';
import { User } from 'src/users/entitys/user.entity';

/**
 * M√≥dulo de criptografia que implementa o padr√£o Strategy para hashing de senhas.
 *
 * ‚ú® CONFIGURA√á√ÉO ATUAL: H√≠brida (suporta Scrypt, Bcrypt e Argon2)
 * üîÑ MIGRA√á√ÉO: Autom√°tica e transparente via HybridStrategy
 * üéØ NOVOS HASHES: Argon2 (m√°xima seguran√ßa)
 * ‚úÖ SENHAS ANTIGAS: Validadas com Scrypt/Bcrypt (compatibilidade total)
 *
 * A HybridStrategy permite:
 * - Validar senhas antigas (Scrypt/Bcrypt) durante o login
 * - Gerar novos hashes usando Argon2 (mais seguro)
 * - Migra√ß√£o transparente sem downtime
 * - Zero impacto para usu√°rios existentes
 */
@Module({
	imports: [
		AppConfigModule,
		TypeOrmModule.forFeature([User]), // Necess√°rio para PasswordMigrationService
	],
	providers: [
		AppConfigService,

		// Registra todas as estrat√©gias dispon√≠veis (necess√°rio para HybridStrategy)
		ScryptStrategy,
		BcryptStrategy,
		Argon2Strategy,
		HybridStrategy,

		// Define qual estrat√©gia ser√° usada (inje√ß√£o de depend√™ncia)
		{
			provide: 'PASSWORD_HASHER',
			useClass: HybridStrategy, // ‚úÖ ESTRAT√âGIA H√çBRIDA (suporta todos os algoritmos)
		},

		// Provider principal que usa a estrat√©gia
		PasswordEncryption,

		// Servi√ßo de migra√ß√£o para transi√ß√£o entre algoritmos
		PasswordMigrationService,
	],
	exports: [PasswordEncryption, PasswordMigrationService],
})
export class EncryptionModule {}
